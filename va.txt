'use client'

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { signInWithPopup, signOut } from 'firebase/auth';
import { auth, provider } from './../../app/api/firebase/firebase';
import { Menu } from '@headlessui/react';

const Navbar: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean>(false);
  const [loggedIn, setLoggedIn] = useState<boolean>(false);

  useEffect(() => {
    // Check if the user is already logged in using local storage
    const userUid = localStorage.getItem('uid');
    if (userUid && auth.currentUser && userUid === auth.currentUser.uid) {
      setLoggedIn(true);
      setSuccess(true);
    }

    // Add an event listener to handle auth state changes
    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user) {
        setLoggedIn(true);
        setSuccess(true);
        // Store the user's UID in local storage
        localStorage.setItem('uid', user.uid);
      } else {
        setLoggedIn(false);
        setSuccess(false);
        // Remove the user's UID from local storage
        localStorage.removeItem('uid');
      }
    });

    // Clean up the event listener
    return () => unsubscribe();
  }, []);

  const login = async () => {
    try {
      await signInWithPopup(auth, provider);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleLogout = () => {
    signOut(auth);
  };

  const currentUser = auth.currentUser;

  return (
    <header>
      <div className="drawer bg-white shadow-md text-primary font-bold text-lg">
        <input id="my-drawer-3" type="checkbox" className="drawer-toggle" />
        <div className="drawer-content flex flex-col">
          {/* Navbar */}
          <div className="w-full navbar bg-gradient-to-r from-white to-bg-gradient flex justify-between items-center">
            <div className="flex-none lg:hidden">
              <label htmlFor="my-drawer-3" className="btn btn-square btn-ghost hover:bg-background hover:shadow-sm">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" className="inline-block w-6 h-6 stroke-current"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
              </label>
            </div>
            <div className="flex items-center">
              <div className="flex items-center">
                <Image
                  src='/img/logo.svg'
                  width={60}
                  height={60}
                  alt='logo'
                />
                <div className="ml-2 ">Creation</div>
              </div>
            </div>

            {/* Mobile View Profile */}
            {loggedIn ? (
              <div>
                <button onClick={handleLogout}>Logout</button>
              </div>
            ) : (
              <div>
                <button onClick={login}>Login</button>
              </div>
            )}
            <div className='flex-none lg:hidden'>
              <div className="avatar">
                <div className="w-11 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2 shadow-sm">
                  <Image alt="dp" src={currentUser ? currentUser.photoURL : '/img/avatar.png'} width={35} height={35} />
                </div>
              </div>
            </div>
            {/* Mobile View Profile end */}

            <div className="flex-none hidden lg:flex items-center">
              <Menu as="div" className="relative">
                {({ open }) => (
                  <>
                    <Menu.Button className="flex items-center justify-center focus:outline-none">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" className="inline-block w-6 h-6 stroke-current"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
                    </Menu.Button>
                    <Menu.Items
                      className={`absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none ${open ? '' : 'hidden'}`}
                    >
                      <Menu.Item>
                        <Link href="/">
                          <a className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Navbar Item 1</a>
                        </Link>
                      </Menu.Item>
                      <Menu.Item>
                        <Link href="/">
                          <a className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Navbar Item 2</a>
                        </Link>
                      </Menu.Item>
                    </Menu.Items>
                  </>
                )}
              </Menu>

              {/* Desktop View Profile */}
              <Link href='/profile'>
                <div className="avatar mr-4">
                  <div className="w-18 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2 shadow-sm">
                    <Image alt='dp' src={currentUser ? currentUser.photoURL : '/img/avatar.png'} width={40} height={40} />
                  </div>
                </div>
              </Link>
              {/* Desktop View Profile end */}
            </div>
          </div>
        </div>
        <div className="drawer-side">
          <label htmlFor="my-drawer-3" className="drawer-overlay"></label>
          <ul className="menu p-4 w-80 h-full bg-base-100 z-20">
            {/* Sidebar content here */}
            <li><a>Sidebar Item 1</a></li>
            <li><a>Sidebar Item 2</a></li>
            <li><a>Sidebar Item 2</a></li>
            <li><a>Sidebar Item 2</a></li>
            <li><a>Sidebar Item 2</a></li>
            <li><a>Sidebar Item 2</a></li>
            <li><a>Sidebar Item 2</a></li>
          </ul>
        </div>
      </div>
      {success && <div>Login successful! {currentUser && currentUser.email}</div>}
      {error && <div>Error: {error}</div>}
    </header>
  );
};

export default Navbar;
